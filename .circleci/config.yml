version: 2.1

orbs:
  slack: circleci/slack@4.1

slack_notify: &slack_notify
  - slack/notify:
      event: fail
      template: basic_fail_1
  - slack/notify:
      event: pass
      template: success_tagged_deploy_1

jobs:     
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm update set-value --depth 8
            npm update union-value --depth 8
            npm update mkdirp --depth 2
            npm update mixin-deep --depth 7
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: installing tar and gzip
          command: |
            yum install tar -y && \
            yum install gzip -y
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run: 
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
      - run:
          name: preview cat
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  # configure-infrastructure:
  #   docker:
  #     - image: python:latest
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: 
  #           - "aa:3a:10:34:0f:ad:1f:0e:5b:97:77:aa:80:7f:88:a8"
  #     - attach_workspace:
  #         at: /tmp
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apt-get update && \
  #           apt-get dist-upgrade -y && \
  #           apt install ansible tar gzip awscli -y
  #     # - run:
  #     #     name: Configure server
  #     #     command: |
  #     #       cd .circleci/ansible && \
  #     #       cat inventory.txt && \
  #     #       ansible-playbook -i inventory.txt configure-server.yml
  #     - run:
  #         name: Configure server
  #         command: |
  #           cat /tmp/project/.circleci/ansible/inventory.txt && \
  #           ansible-playbook -i /tmp/project/.circleci/ansible/inventory.txt ./.circleci/ansible/configure-server.yml

  configure-infrastructure:
    docker:
      #- image: python:3.7-alpine3.11
      - image: python:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "aa:3a:10:34:0f:ad:1f:0e:5b:97:77:aa:80:7f:88:a8"
      - attach_workspace:
          at: /tmp
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apt-get update && \
            apt-get dist-upgrade -y && \
            apt install ansible tar gzip awscli -y

      # - run:
      #     name: Configure server
      #     command: |
      #       cd .circleci/ansible && \
      #       cat inventory.txt && \
      #       ansible-playbook -i inventory.txt configure-server.yml
      - run:
          name: Configure server
          command: |
            cat /tmp/project/.circleci/ansible/inventory.txt && \
            cd .circleci/ansible
            ansible-playbook -i /tmp/project/.circleci/ansible/inventory.txt configure-server.yml


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt 
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/FwP6fu5sPSRouHn2tEjAuf/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cat /etc/*-release && \
            yum update -y && yum upgrade -y && \
            yum install gcc-c++ make curl -y && \
            yum install tar -y && \
            yum install gzip -y
      
      - run:
          name: installing node
          command: |
            curl -sL https://rpm.nodesource.com/setup_13.x | bash && \
            yum install nodejs -y && \
            node -v 

      # - run:
      #     name: installing python and ansible
      #     command: |
      #       yum install python3 -y && \
      #       python3 -m pip install --user ansible 

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "aa:3a:10:34:0f:ad:1f:0e:5b:97:77:aa:80:7f:88:a8"
      - attach_workspace:
          at: /tmp
      - run:
          name: Install dependencies
          command: |
            apt-get update && \
            apt-get dist-upgrade -y && \
            apt install ansible tar gzip awscli -y
      - run:
          name: Install node
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | bash && \
            apt-get install -y nodejs && \
            node -v
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

workflows:
  my-work-flow:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      #     context: Project-3-Context
      # - scan-backend:
      #     requires: [build-backend]
      #     context: Project-3-Context
      # - deploy-infrastructure 
      # - configure-infrastructure:
      #     requires:
      #       - deploy-infrastructure
      # - run-migrations:
      #     requires:
      #       - configure-infrastructure
      #- deploy-frontend
          # requires:
          #   - run-migrations
      - deploy-backend